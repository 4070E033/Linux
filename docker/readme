
快速體驗Docker

本次課程將以Ubuntu 18.04 LTS 64-bit建置Docker快活測試環境

實戰lab1:安裝Docker環境(Docker v 18.03)

https://docs.docker.com/install/

Ubuntu 16.04下安裝還是比較方便的，使用命令：

apt-get install docker.io

安裝成功之後，查看是否安裝成功：

docker --version

docker images

=====================================

實戰lab1:熟悉docker指令

https://www.gitbook.com/book/joshhu/dockercommands/details

docker的指令主要分為四大類，分別是：
Linux系統相關指令
Docker Registry相關指令
映像檔相關指令
Container相關指令


docker info

docker version  列出目前Docker的版本，以及Go語言的版本等。

用途：常用來檢查是否要昇級到較高的Docker版本。

docker search nginx

docker search -s 10 nginx

在Docker Hub找中尋找映像檔用的。最好用的就是-s參數，用來找評等較高(星級)的映像檔。
由於Docker Hub是人人可上傳的，因此映像檔的品質參差不齊。查看大家評等較高的映像檔，品質較有口碑。

列出本機映像檔docker images

docker images -a

-a：列出完整的映像檔層次資訊。每個映像檔是由不同層次組成的，我們會在稍後說明。
-q：只列出映像檔ID。這在做映像檔批次處理時很方便。
-tree：官方文件已經沒有這個參數，但還是可以用。列出映像檔不同層次之間的樹狀關係。

下載映像檔docker pull

將映像檔存入/匯出電腦檔案格式docker save/load

Docker的映像檔雖然名為檔案，但其格式十分複雜(本書後面章節會有說明)。
你也不知道他存在哪，也不知道什麼格式，如果想要和其它人交換時 ，不想上傳到Docker Hub，
不想自己架設私有Docker Registry，就可以用這兩個參數存成tarball格式及匯出。
存入時別忘了加-o參數，要不然只會在顯示不會真的壓縮。

$ docker save -o webdemou12.tar joshhu/webdemo:u12
$ ls -al
total 294020
drwxrwxr-x  4 joshhu joshhu      4096 Mar 26 00:37 .
drwxr-xr-x 27 joshhu joshhu      4096 Mar 25 20:03 ..
drwxr-xr-x  3 joshhu joshhu      4096 Mar 22 08:25 test
drwxr-xr-x  3 joshhu joshhu      4096 Mar 25 23:52 u12
-rw-r--r--  1 root   root   301058560 Mar 26 00:37 webdemou12.tar


將tarball還原回映像檔格式，則用load。可輸入

$ docker load --input webdemou12.tar

-----------------------------
Container和映像檔之間的操作

commit：將Container的改變存入映像檔
export：將Container存成快照
import：從Container快照恢復成映像檔

Container執行時的操作
create：建立Container並執行指令
run：同create
kill：刪除執行中的Container，但Container還是存在，只是死了。
rm：刪除Container(停止或運行中都行)，Container就從這世上消失了
pause：暫停執行中的Container，仍暫有記憶體停，服務不中斷
unpause：恢復暫停中的Container
stop：停止執行中的Container，但不暫有記憶體，服務中斷
start：啟動停止中的Container
restart：重新啟動Container
wait：讓Container暫停直到Container停止為止
rename：更名Container

Container的狀態
inspect：檢查Container的狀態(非常常用)
stats：查看Container的CPU、記憶體及網路使用
port：查看Container的通訊埠使用
ps：查看Container使用狀態
top：查看Container在主系統中的記憶體使用
dip：查看Container的IP
dpid：查看Container的pid

Container執行時的操作
attach：連接Container的標準輸出輸入端
exec：在外部向Container內執行指令
denter：進入Container
logs：將Container內的輸出顯示到螢幕上

Container和主系統之間的操作
cp：複製Container內的檔案到主系統
diff：列出兩個Container之間檔案系統差異
events：列出某個時間點之前或之後的事件

和Linux的指令配合使用

Docker的執行常常和Linux的內部指令配合使用，如grep、awk、xargs等，會在需要的時候提及。
下面的例子就是列出所有Container的狀態(docker stats預設只會列出指定Container的狀態)。

docker ps | awk 'NR>1 {print $NF}'| xargs docker stats

$ docker stats $(docker ps | awk 'NR>1 {print $NF}')



不同主題學習
=====================================

實戰lab:使用Docker學習 Mysql資料庫技術

實戰lab:使用Docker學習 redis資料庫技術

下載/安裝鏡像:docker pull redis

執行:docker run --name some-redis -d redis

https://hub.docker.com/_/redis/

=====================================

程式開發

---------------------------------------------------

docker pull mhndev/docker-lua

Default lua version : 5.3.4

Default luarocks version : 2.4.1

docker-compose exec lua_server install-module <module-name>

---------------------------------------------------

docker pull golang

Dockerfile, writing something along the lines of the following will compile and run your project:

FROM golang:1.8

WORKDIR /go/src/app
COPY . .

RUN go get -d -v ./...
RUN go install -v ./...

CMD ["app"]
You can then build and run the Docker image:

$ docker build -t my-golang-app .

$ docker run -it --rm --name my-running-app my-golang-app

--------------------------------------

docker pull ruby

Create a Dockerfile in your Ruby app project
FROM ruby:2.5

# throw errors if Gemfile has been modified since Gemfile.lock
RUN bundle config --global frozen 1

WORKDIR /usr/src/app

COPY Gemfile Gemfile.lock ./
RUN bundle install

COPY . .

CMD ["./your-daemon-or-script.rb"]
Put this file in the root of your app, next to the Gemfile.

You can then build and run the Ruby image:

$ docker build -t my-ruby-app .
$ docker run -it --name my-running-script my-ruby-app

=====================================

實戰lab:使用Docker學習vlc

https://github.com/galexrt/docker-vlc

下載/安裝鏡像:docker pull quay.io/galexrt/vlc:latest

下載/安裝鏡像:docker pull galexrt/vlc:latest

執行: docker run -d quay.io/galexrt/vlc:latest YOUR_VLC_SOUT_STRING


實戰lab:建置你的Dockerized Tensorflow學習環境

=====================================

實戰lab:使用Docker學習 Kali linux

https://www.kali.org/news/official-kali-linux-docker-images/

下載/安裝鏡像:  docker pull kalilinux/kali-linux-docker

執行: docker run -t -i kalilinux/kali-linux-docker

實戰lab:使用Docker學習網站滲透測試(OWASP Mutillidae II)

Docker container for OWASP Mutillidae II Web Pen-Test Practice Application

https://github.com/citizen-stig/dockermutillidae

下載/安裝鏡像: docker pull citizenstig/nowasp

Start with random mysql password: docker run -d -p 80:80 citizenstig/nowasp

Or specify it as environment variable: 

sudo docker run -d -p 80:80 -p 3306:3306 -e MYSQL_PASS="Chang3ME!" citizenstig/nowasp


實戰lab:使用Docker學習網站滲透測試(webgoat-8.0)

https://github.com/WebGoat/WebGoat

下載/安裝鏡像:docker pull webgoat/webgoat-8.0

docker run -p 8080:8080 -it webgoat/webgoat-8.0 /home/webgoat/start.sh 

http://192.168.99.100:8080/WebGoat

實戰lab:使用Docker學習網站滲透測試(webgoat-8.0)

docker-dvwa Docker image for DVWA(Damn Vulnerable Web Application)

https://github.com/infoslack/docker-dvwa

下載/安裝鏡像:docker pull infoslack/dvwa

Start with random mysql password: 

docker run -d -p 80:80 infoslack/dvwa

Or set environment variable: 

docker run -d -p 80:80 -p 3306:3306 -e MYSQL_PASS="mypass" infoslack/dvwa

實戰lab:使用Docker學習網站滲透測試(securityshepherd)

https://github.com/OWASP/SecurityShepherd

下載/安裝鏡像:docker pull ismisepaul/securityshepherd

Note: You'll need to get a shell on your docker container and run mysql and tomcat manually;

docker run -i -p 80:80 -p 443:443 -p 27017:27017 -t ismisepaul/securityshepherd /bin/bash

/usr/bin/mongod &
/usr/bin/mysqld_safe &
service tomcat7 start


實戰lab:使用Docker學習網站滲透測試(dvxte)


https://github.com/davevs/dvxte

項目簡介

Dvxte是一個Docker容器，裡面包含了幾個漏洞演練程式。通過使用Docker容器更容易設置，並可以更方便的進行重置等操作。

包含環境
目前在Docker容器中實現了以下環境：

DVWA https://github.com/ethicalhack3r/DVWA

DVWServices https://github.com/snoopysecurity/dvws

DVWSockets https://github.com/interference-security/DVWS

WebGoat https://github.com/WebGoat/WebGoat

Juiceshop https://github.com/bkimminich/juice-shop

Railsgoat https://github.com/OWASP/railsgoat

django.NV https://github.com/nVisium/django.nV

Buggy Bank https://www.mavensecurity.com/about/webmaven/

Mutilidae II https://sourceforge.net/projects/mutillidae/files/

包含工具

容器中安裝了以下工具：

Mailcatcher https://mailcatcher.me/

Brakeman http://brakemanscanner.org/

RIPS https://sourceforge.net/projects/rips-scanner/files/

TODO

未來計畫加入：

Security Shepherd https://github.com/OWASP/SecurityShepherd

Webgoat.net https://github.com/jerryhoff/WebGoat.NET

實戰lab:使用Docker學習安全檢測

Vane：開源WordPress安全檢測工具

http://www.mottoin.com/93624.html

docker build -t vane .

docker run --rm vane --help

docker pull wordpress

docker run --name some-wordpress --link some-mysql:mysql -d wordpress


NeXT
透過這次課程你可以在期待我們更多的課程
